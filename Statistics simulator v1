--Statistics simulator v7.3 -- graph at bit.ly/3aIzclT
--This compares the difference in means between two groups of
--x dice rolls, where the second group is offset by a variable.
--The simulations will assume both groups are normal (no offset).
simulations = 100 --simulations of the experiment
grouping = 10 --die rolls per table
die_offset = 1 --add this to values in second die table
sides = 6 --amount of sides in the die; affects Ïƒ
calculatesignificance = .05 --p-value

function simulate()
	math.randomseed(os.time())
	diffmeans = {}
	for i = 1, simulations do
		die = {}
		die2 = {}
		die_avg = 0
		die2_avg = 0
		for i = 1, grouping do --creates two tables of die rolls
			table.insert(die, math.random(1,sides))
			table.insert(die2,math.random((1+die_offset),(sides+die_offset)))
		end
		if i == 1 then --gets means, first time only
			die_initavg = 0
			die2_initavg = 0
			for _, v in ipairs(die) do
				die_initavg = die_initavg + v
			end
			for _, v in ipairs(die2) do
				die2_initavg = die2_initavg + v
			end
			die_initavg = die_initavg/#die
			die2_initavg = die2_initavg/#die2
			commadie = {}
			commadie2 = {}
			for i, v in ipairs(die) do
				if i ~= #die then
					v = (v..",")
				end
				table.insert(commadie, v)
			end
			for i, v in ipairs(die2) do
				if i ~= #die2 then
					v = (v..",")
				end
				table.insert(commadie2, v)
			end
			print("Initial table data:")
			print(unpack(commadie))
			print("Mean: " .. math.round(die_initavg*100)/100)
			print(unpack(commadie2))
			print("Mean: " .. math.round(die2_initavg*100)/100)
			die_offset = 0 --prepares to simulate normal means
		end
		for _, v in ipairs(die) do --mean differences to tables
			die_avg = die_avg + v
		end
		for _, v in ipairs(die2) do
			die2_avg = die2_avg + v
		end
		die_avg = die_avg/(#die)
		die2_avg = die2_avg/(#die2)
		if die2_avg - die_avg > 0 then --rounds to nearest tenth
			table.insert(diffmeans, (math.round(10*(die2_avg - die_avg))/10))
		else
			table.insert(diffmeans, (math.round(10*(die2_avg - die_avg))/10))
		end
	end
	commadiffmeans = {} --adds commas for data pasting
	for i, v in ipairs(diffmeans) do
		if i ~= #diffmeans then
			v = (v..", ")
		end
		table.insert(commadiffmeans, v)
	end
	table.remove(commadiffmeans, 1)
	print(string.rep("-",50))
	print("Mean difference data over " .. simulations .. " simulations:")
	print(table.concat(commadiffmeans))
	if calculatesignificance then
		print(string.rep("-",50))
		leftsig = 0
		rightsig = 0
		diffsig = (math.floor((die2_initavg - die_initavg)*100))/100
		for i,v in ipairs(diffmeans) do
			if diffsig >= v then
				leftsig = leftsig + 1
			elseif diffsig <= v then
				rightsig = rightsig + 1
			end
		end
		if rightsig / #diffmeans <= calculatesignificance / 2 then
			print("The data is statistically significant. A difference of "..diffsig.." or greater occurs less than ".. calculatesignificance*50 .."% of the time.")
		elseif leftsig / #diffmeans <= calculatesignificance / 2 then
			print("The data is statistically significant. A difference of "..diffsig.." or less occurs less than ".. calculatesignificance*50 .."% of the time.")
		else
			print("The "..diffsig.." difference is not statistically significant according to a p-value of ".. calculatesignificance ..".")
		end
		print((math.floor((leftsig/#diffmeans)*10000)/100).."% of results are lower; ", " ", ((math.floor((rightsig/#diffmeans)*10000))/100).."% of results are higher.")
	end
end

simulate()
